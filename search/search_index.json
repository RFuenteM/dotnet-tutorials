{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcda Dotnet Tutorials","text":"<p>Bienvenido a la colecci\u00f3n de tutoriales de C# y .NET. Aqu\u00ed encontrar\u00e1s ejemplos pr\u00e1cticos, advertencias comunes y buenas pr\u00e1cticas.</p>"},{"location":"#tutoriales-disponibles","title":"Tutoriales disponibles","text":"<ul> <li>Referencias nulas</li> <li>Async/Await</li> </ul>"},{"location":"async-await/","title":"Async / Await en C","text":"<p>El uso de <code>async</code> y <code>await</code> simplifica el trabajo con tareas as\u00edncronas.</p>"},{"location":"async-await/#ejemplo-basico","title":"\ud83d\udd0d Ejemplo b\u00e1sico","text":"<p>Ver en SharpLab</p> <pre><code>static async Task Main()\n{\n    await PrintMessage();\n}\n\nstatic async Task PrintMessage()\n{\n    await Task.Delay(1000);\n    Console.WriteLine(\"Hola desde async/await\");\n}\n</code></pre>"},{"location":"nullable-references/","title":"Referencias nulas en C#","text":"<p>Desde C# 8, el compilador incluye an\u00e1lisis de nulabilidad (<code>nullable reference types</code>).</p>"},{"location":"nullable-references/#ejemplo-con-advertencia","title":"\ud83d\udd0d Ejemplo con advertencia","text":"<p>El siguiente c\u00f3digo genera <code>CS8602</code> (Dereference of a possibly null reference):</p> <pre><code>#nullable enable\n\nstring? text = null;\nConsole.WriteLine(text.Length); // \u26a0\ufe0f Posible null\n</code></pre> <p>\u2705 Soluci\u00f3n</p> <pre><code>Console.WriteLine(text?.Length ?? 0);\n</code></pre>"},{"location":"nullable-references/#ejemplo-real-en-driver","title":"\ud83d\udd0d Ejemplo real en Driver","text":"<p>El siguiente c\u00f3digo genera <code>CS8600</code> (Converting null literal or possible null value to non-nullable type.):</p> <pre><code>int configTimeMin = 10;\nIntParameter configTimeMinParam = parameter.Parent.GetParam(\"CONFIG_MARGIN_TIME\") as IntParameter; // \u26a0\ufe0f Posible null\nif (configTimeMinParam != null) configTimeMin = configTimeMinParam.Value;\n</code></pre> <p>\ud83d\udca1 Eliminaci\u00f3n de la advertencia</p> <pre><code>IntParameter? configTimeMinParam = parameter.Parent.GetParam(\"CONFIG_MARGIN_TIME\") as IntParameter;\n</code></pre> <p>\ud83d\udca1 Mejor, dejar al compilador adivinar el tipo. Sabe m\u00e1s que t\u00fa:</p> <pre><code>var configTimeMinParam = parameter.Parent.GetParam(\"CONFIG_MARGIN_TIME\") as IntParameter;\n</code></pre> <p>\ud83d\udca1 Mejor, utilizar el m\u00e9todo <code>GetParam&lt;T&gt;</code> disponible en <code>Device.cs</code>:</p> <pre><code>var configTimeMinParam = parameter.Parent.GetParam&lt;IntParameter&gt;(\"CONFIG_MARGIN_TIME\");\n</code></pre> <p>\u2705 Soluci\u00f3n completa con operadores de nulabilidad</p> <pre><code>var configTimeMinParam = parameter.Parent.GetParam&lt;IntParameter&gt;(\"CONFIG_MARGIN_TIME\");\nint configTimeMin = configTimeMinParam?.Value ?? 10;\n</code></pre> <p>Ver en SharpLab</p>"},{"location":"nullable-references/#operadores","title":"Operadores","text":"Operador Nombre Ejemplo Descripci\u00f3n <code>?.</code> \ud83d\udd39 Operador de acceso condicional nulo <code>obj?.Propiedad</code> Accede a un miembro solo si el objeto no es <code>null</code>. Devuelve <code>null</code> si lo es. <code>??</code> \ud83d\udd39 Operador de fusi\u00f3n nula <code>x ?? y</code> Devuelve <code>x</code> si no es <code>null</code>; si es <code>null</code>, devuelve <code>y</code>. <code>!</code> \u26a0\ufe0f Operador null-forgiving <code>string s = posibleNull!;</code> Indica al compilador que un valor que podr\u00eda ser <code>null</code> no lo es, suprimiendo advertencias. <code>??=</code> \ud83d\udd39 Operador de asignaci\u00f3n de fusi\u00f3n nula <code>x ??= valorPorDefecto;</code> Asigna <code>valorPorDefecto</code> solo si <code>x</code> es <code>null</code>."}]}